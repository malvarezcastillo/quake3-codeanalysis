    design patterns and anti-patterns\\

            Todo el diseño de el software que se está analizando se ha organizado en base a una arquitectura compuesta por cuatro grandes bloques que estructurarían, simplificarían y flexibilizarían el proceso de diseño: UI, IA, Motor físico y motor gráfico (??????).
                (http://diposit.ub.edu/dspace/bitstream/2445/67212/2/memoria.pdf)\\

                        El software de Quake III Arena está considerado un buen ejemplo de programación estructurada, que gira en torno a una adecuada definición de funciones y a un equilibrio respecto a la complejidad de las mismas. En la versión que se está analizando en esta memoria, se puede observar que el código está bien diseñado y estructurado, pudiendo tener una visión global de su estructura.\\

                                El desarrollo ha sido realizado íntegramente utilizando el lenguaje C \,---\,es decir, un lenguaje no orientado a objetos \,---\, por lo que no se pueden encontrar patrones de diseño software tal y como se está acostumbrado a encontrarlos. Pero esto no implica que no puedan estar presentes a lo largo del código. Se ha intentado localizar algunos conocidos como el \textit{observador}, \textit{estado} y \textit{estrategia}, y a continuación se
                                expondrán algunos de ellos:\\


                                            \textbf{Estrategia:}
                                                % No estoy ni un 10% segura, pero a ver qué opinas tú, martín
                                                    \begin{lstlisting}[style=C, numbers=none]
                                                        static void UI_OwnerDraw(float x, float y, float w, float h, float text_x, float text_y, int ownerDraw, int ownerDrawFlags, int align, float special, float scale, vec4_t color, qhandle_t shader, int textStyle) {

                                                                    \end{lstlisting}

                                                                            En la interfaz de usuario existe la función llamada \textit{UI\_OwnerDraw} (cuya cabecera se puede observar en el código anterior) que parece indicar que existe un patrón estrategia. La diferente estrategia, en este caso, se elige mediante el parámetro \textit{int ownerDraw}\\, que recorrerá un \textit{case} dentro de la función principal e indicará a cuál tiene que llamar.\\

                                                                                    % Intentar analizar a ver si se encuentra algún observador. A lo mejor para finalizar la partida si te matan o algo. Hay que mirar.


